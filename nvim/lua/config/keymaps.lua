-- snacks.nvim keymaps
local Snacks = require("snacks")
-- TOP LEVEL

local map = vim.keymap.set

map("n", "<Esc>", "<cmd>noh<CR>", { desc = "general clear highlights" })
map("n", "<leader>q", "<cmd>qa<cr>", { desc = "Quit NeoVim" })
map("n", "<leader>Q", "<cmd>qa!<cr>", { desc = "Force Quit NeoVim" })
map("n", "<C-s>", "<cmd>w<cr>", { desc = "Write Buffer" })
map("n", "<C-S>", "<cmd>wa<cr>", { desc = "Write All Buffer" })
map("n", "<Tab>", "<cmd>bnext<cr>", { desc = "Next Buffer" })
map("n", "<S-Tab>", "<cmd>bprev<cr>", { desc = "Prev Buffer" })
map("n", "<leader>x", "<cmd>bd<cr>", { desc = "Close Buffer" })
map("n", "<leader>X", "<cmd>bd!<cr>", { desc = "Force Close Buffer" })
map("n", "<leader>n", "<cmd>new<cr>", { desc = "New Buffer" })
map("n", "q:", "<nop>")

-- FILES
map("n", "<leader>ff", function()
	Snacks.picker.files()
end, { desc = "Find Files" })
map("n", "<leader>fr", function()
	Snacks.picker.recent()
end, { desc = "Recent Files" })
map("n", "<leader>fc", function()
	Snacks.picker.files({ cwd = vim.fn.stdpath("config") })
end, { desc = "Find Config File" })
map("n", "<leader>fg", function()
	Snacks.picker.git_files()
end, { desc = "Find Git Files" })
map("n", "<leader>fb", function()
	Snacks.picker.buffers()
end, { desc = "Find Buffers" })
map("n", "<leader>fp", function()
	Snacks.picker.projects()
end, { desc = "Projects" })
map("n", "<leader>fz", function()
	Snacks.picker.lines()
end, { desc = "Find in Current Buffer" })

-- EXPLORER
map("n", "<leader>e", function()
	Snacks.explorer()
end, { desc = "File Explorer" })

-- GIT
map("n", "<leader>gb", function()
	Snacks.picker.git_branches()
end, { desc = "Git Branches" })
map("n", "<leader>gl", function()
	Snacks.picker.git_log()
end, { desc = "Git Log" })
map("n", "<leader>gL", function()
	Snacks.picker.git_log_line()
end, { desc = "Git Log Line" })
map("n", "<leader>gs", function()
	Snacks.picker.git_status()
end, { desc = "Git Status" })
map("n", "<leader>gS", function()
	Snacks.picker.git_stash()
end, { desc = "Git Stash" })
map("n", "<leader>gd", function()
	Snacks.picker.git_diff()
end, { desc = "Git Diff" })
map("n", "<leader>gf", function()
	Snacks.picker.git_log_file()
end, { desc = "Git Log File" })
map({ "n", "v" }, "<leader>gB", function()
	Snacks.gitbrowse()
end, { desc = "Git Browse" })
map("n", "<leader>gg", function()
	Snacks.lazygit()
end, { desc = "Lazygit" })

-- LSP
map("n", "<leader>ld", function()
	Snacks.picker.lsp_definitions()
end, { desc = "Goto Definition" })
map("n", "gd", function()
	Snacks.picker.lsp_definitions()
end, { desc = "Goto Definition" })
map("n", "<leader>lD", function()
	Snacks.picker.lsp_declarations()
end, { desc = "Goto Declaration" })
map("n", "<leader>lr", function()
	Snacks.picker.lsp_references()
end, { desc = "References" })
map("n", "<leader>lI", function()
	Snacks.picker.lsp_implementations()
end, { desc = "Goto Implementation" })
map("n", "<leader>ly", function()
	Snacks.picker.lsp_type_definitions()
end, { desc = "Goto Type Definition" })
map("n", "<leader>ls", function()
	Snacks.picker.lsp_symbols()
end, { desc = "LSP Symbols" })
map("n", "<leader>lS", function()
	Snacks.picker.lsp_workspace_symbols()
end, { desc = "Workspace Symbols" })

-- SEARCH (non-files) - MOVED TO <leader>f
map("n", "<leader>fb", function()
	Snacks.picker.lines()
end, { desc = "Buffer Lines" })
map("n", "<leader>fB", function()
	Snacks.picker.grep_buffers()
end, { desc = "Grep Open Buffers" })
map("n", "<leader>fg", function()
	Snacks.picker.grep()
end, { desc = "Grep" })
map({ "n", "x" }, "<leader>fw", function()
	Snacks.picker.grep_word()
end, { desc = "Grep Word/Selection" })
map("n", "<leader>fh", function()
	Snacks.picker.help()
end, { desc = "Help Pages" })
map("n", "<leader>fk", function()
	Snacks.picker.keymaps()
end, { desc = "Keymaps" })
map("n", "<leader>fm", function()
	Snacks.picker.marks()
end, { desc = "Marks" })
map("n", "<leader>fM", function()
	Snacks.picker.man()
end, { desc = "Man Pages" })
map("n", "<leader>fu", function()
	Snacks.picker.undo()
end, { desc = "Undo History" })
map("n", "<leader>fq", function()
	Snacks.picker.qflist()
end, { desc = "Quickfix List" })
map("n", "<leader>fl", function()
	Snacks.picker.loclist()
end, { desc = "Location List" })

-- UI / TOGGLES
map("n", "<leader>uz", function()
	Snacks.zen()
end, { desc = "Toggle Zen Mode" })
map("n", "<leader>uZ", function()
	Snacks.zen.zoom()
end, { desc = "Toggle Zoom" })
map("n", "<leader>un", function()
	Snacks.notifier.hide()
end, { desc = "Dismiss Notifications" })
map("n", "<leader>uc", function()
	Snacks.toggle.option("conceallevel", { off = 0, on = 2 })
end, { desc = "Toggle Conceal" })
map("n", "<leader>ul", function()
	Snacks.toggle.line_number()
end, { desc = "Toggle Line Numbers" })
map("n", "<leader>uL", function()
	Snacks.toggle.option("relativenumber")
end, { desc = "Toggle Relative Number" })
map("n", "<leader>uw", function()
	Snacks.toggle.option("wrap")
end, { desc = "Toggle Wrap" })
map("n", "<leader>us", function()
	Snacks.toggle.option("spell")
end, { desc = "Toggle Spell" })

-- EDITITNG
map("n", "<leader>/", "gcc", { desc = "toggle comment", remap = true })
map("v", "<leader>/", "gc", { desc = "toggle comment", remap = true })

-- DEBUG

local dap = require("dap")

map("n", "<F5>", dap.continue, { desc = "DAP Continue" })
map("n", "<F10>", dap.step_over, { desc = "DAP Step Over" })
map("n", "<F11>", dap.step_into, { desc = "DAP Step Into" })
map("n", "<F12>", dap.step_out, { desc = "DAP Step Out" })

-- ‚õî Breakpoints
map("n", "<F6>", dap.toggle_breakpoint, { desc = "DAP Toggle Breakpoint (F6)" })
map("n", "<leader>db", dap.toggle_breakpoint, { desc = "DAP Toggle Breakpoint" })
map("n", "<leader>dB", function()
	dap.set_breakpoint(vim.fn.input("Breakpoint condition: "))
end, { desc = "DAP Conditional Breakpoint" })

-- üìù Logpoints
map("n", "<leader>dp", function()
	dap.set_breakpoint(nil, nil, vim.fn.input("Log point message: "))
end, { desc = "DAP Set Logpoint" })

-- üìú REPL / Eval
map("n", "<leader>de", dap.repl.open, { desc = "DAP Open REPL" })
map("n", "<leader>dl", dap.run_last, { desc = "DAP Run Last" })
